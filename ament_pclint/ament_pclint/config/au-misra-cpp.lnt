// ---------------------------------------------------------------------
// This file is provided by Gimpel Software (www.gimpel.com) for use with
// PC-lint Plus.
//
// Redistribution and use of this file, with or without modification, is
// permitted provided that any such redistribution retains this notice.
// ---------------------------------------------------------------------
// au-misra-cpp.lnt -- Author options - MISRA C++

/*
    This options file can be used to explicitly activate those
    checks advocated by the Motor Industry Software Reliability
    Association for C++ code.

    You can use this file directly when linting your programs as in:

    lin  au-misra-cpp  files

    Gimpel Software relies on the document, "MISRA-C++:2008
    Guidelines for the use of the C++ language in critical systems",
    copyright 2008 by MIRA Limited, as the primary source for this
    file.  Gimpel Software makes no warranty as to the completeness
    or applicability of this options file and reserves the right to
    amend or alter the official contents of such at any time.

    "MISRA" is a registered trademark of MIRA Limited, held on
    behalf of the MISRA Consortium.

 */

/* Rule 0-1-1    (req) *********************************/

    /* 527 - statement is unreachable due to unconditional transfer of control */
    +e527
    // +elib(527)
    -append(527,[MISRA C++ Rule 0-1-1])

    /* 506 - integer constant expression used in boolean context */
    +e506
    // +elib(506)
    -append(506,[MISRA C++ Rule 0-1-1])

    /* 681 - loop is likely not entered */
    +e681
    // +elib(681)
    -append(681,[MISRA C++ Rule 0-1-1])

    /* 827 - loop can only be reached via goto due to unconditional transfer of
            control */
    +e827
    // +elib(827)
    -append(827,[MISRA C++ Rule 0-1-1])

    /* 685 - relational operator always evaluates to true/false */
    +e685
    // +elib(685)
    -append(685,[MISRA C++ Rule 0-1-1])

    /* 774 - boolean condition always evaluates to true/false */
    +e774
    // +elib(774)
    -append(774,[MISRA C++ Rule 0-1-1])

    /* 944 - left/right operand always evaluates to true/false */
    +e944
    // +elib(944)
    -append(944,[MISRA C++ Rule 0-1-1])

/* Rule 0-1-2    (req) *********************************/

    /* 685 - relational operator always evaluates to true/false */
    +e685
    // +elib(685)
    -append(685,[MISRA C++ Rule 0-1-2])

    /* 774 - boolean condition always evaluates to true/false */
    +e774
    // +elib(774)
    -append(774,[MISRA C++ Rule 0-1-2])

    /* 827 - loop can only be reached via goto due to unconditional transfer of
            control */
    +e827
    // +elib(827)
    -append(827,[MISRA C++ Rule 0-1-2])

    /* 944 - left/right operand always evaluates to true/false */
    +e944
    // +elib(944)
    -append(944,[MISRA C++ Rule 0-1-2])

/* Rule 0-1-3    (req) *********************************/

    /* 528 - static symbol not referenced */
    +e528
    // +elib(528)
    -append(528,[MISRA C++ Rule 0-1-3])

    /* 529 - local variable not subsequently referenced */
    +e529
    // +elib(529)
    -append(529,[MISRA C++ Rule 0-1-3])

    /* 714 - external symbol was defined but not referenced */
    +e714
    // +elib(714)
    -append(714,[MISRA C++ Rule 0-1-3])

    /* 752 - local declarator not referenced */
    +e752
    // +elib(752)
    -append(752,[MISRA C++ Rule 0-1-3])

    /* 757 - global declarator not referenced */
    +e757
    // +elib(757)
    -append(757,[MISRA C++ Rule 0-1-3])

    /* 1715 - static member symbol not referenced */
    +e1715
    // +elib(1715)
    -append(1715,[MISRA C++ Rule 0-1-3])

/* Rule 0-1-4    (req) *********************************/

    /* 528 - static symbol not referenced */
    +e528
    // +elib(528)
    -append(528,[MISRA C++ Rule 0-1-4])

    /* 529 - local variable not subsequently referenced */
    +e529
    // +elib(529)
    -append(529,[MISRA C++ Rule 0-1-4])

    /* 550 - local variable not subsequently accessed */
    +e550
    // +elib(550)
    -append(550,[MISRA C++ Rule 0-1-4])
    
    /* 551 - static variable not accessed */
    +e551
    // +elib(551)
    -append(551,[MISRA C++ Rule 0-1-4])
    
    /* 552 - external variable not accessed */
    +e552
    // +elib(552)
    -append(552,[MISRA C++ Rule 0-1-4])

/* Rule 0-1-5    (req) *********************************/

    /* 751 - local typedef not referenced */
    +e751
    // +elib(751)
    -append(751,[MISRA C++ Rule 0-1-5])
    
    /* 753 - local tag not referenced */
    +e753
    // +elib(753)
    -append(753,[MISRA C++ Rule 0-1-5])
    
    /* 756 - global typedef not referenced */
    +e756
    // +elib(756)
    -append(756,[MISRA C++ Rule 0-1-5])
    
    /* 758 - global tag not referenced */
    +e758
    // +elib(758)
    -append(758,[MISRA C++ Rule 0-1-5])

/* Rule 0-1-6    (req) *********************************/

    /* 438 - last value assigned to symbol not used */
    +e438
    // +elib(438)
    -append(438,[MISRA C++ Rule 0-1-6])

    /* 838 - previous value assigned to symbol not used */
    +e838
    // +elib(838)
    -append(838,[MISRA C++ Rule 0-1-6])

/* Rule 0-1-7    (req) *********************************/

    /* 534 - ignoring return value of function */
    +e534
    // +elib(534)
    -append(534,[MISRA C++ Rule 0-1-7])

/* Rule 0-1-8    (req) *********************************/

    /* 9175 - function has void return type and no external side-effects */
    +e9175
    // +elib(9175)
    -append(9175,[MISRA C++ Rule 0-1-8])

/* Rule 0-1-9    (req) *********************************/

    /* 438 - last value assigned to symbol not used */
    +e438
    // +elib(438)
    -append(438,[MISRA C++ Rule 0-1-9])

    /* 587 - predicate can be pre-determined and always evaluates to true/false */
    +e587
    // +elib(587)
    -append(587,[MISRA C++ Rule 0-1-9])
    
    /* 685 - relational operator always evaluates to true/false */
    +e685
    // +elib(685)
    -append(685,[MISRA C++ Rule 0-1-9])
    
    /* 774 - boolean condition always evaluates to true/false */
    +e774
    // +elib(774)
    -append(774,[MISRA C++ Rule 0-1-9])
    
    /* 838 - previous value assigned to symbol not used */
    +e838
    // +elib(838)
    -append(838,[MISRA C++ Rule 0-1-9])
    
    /* 944 - left/right operand always evaluates to true/false */
    +e944
    // +elib(944)
    -append(944,[MISRA C++ Rule 0-1-9])
    
    /* 948 - operator always evaluates to true/false */
    +e948
    // +elib(948)
    -append(948,[MISRA C++ Rule 0-1-9])

/* Rule 0-1-10    (req) *********************************/

    /* 528 - static symbol not referenced */
    +e528
    // +elib(528)
    -append(528,[MISRA C++ Rule 0-1-10])
    
    /* 714 - external symbol was defined but not referenced */
    +e714
    // +elib(714)
    -append(714,[MISRA C++ Rule 0-1-10])
    
    /*1714 - member function not referenced */
    +e1714
    // +elib(1714)
    -append(1714,[MISRA C++ Rule 0-1-10])
    
    /* default constructor not referenced */
    +e1914
    // +elib(1914)
    -append(1914,[MISRA C++ Rule 0-1-10])

/* Rule 0-1-11    (req) *********************************/

    /* 715 - named parameter not subsequently referenced */
    +e715
    // +elib(715)
    -append(715,[MISRA C++ Rule 0-1-11])

/* Rule 0-1-12    (req) *********************************/

    /* 715 - named parameter not subsequently referenced */
    +e715
    // +elib(715)
    -append(715,[MISRA C++ Rule 0-1-12])

/* Rule 0-2-1    (req) *********************************/

    /*  See rule 9-5-1.  */

/* Rule 0-3-1    (doc) *********************************/

    /*  Static Analysis is provided by using PC-lint Plus */

/* Rule 0-3-2   (req) *********************************/

    /* 534 - ignoring return value of function */
    +e534
    // +elib(534)
    -append(534,[MISRA C++ Rule 0-3-2])

/* Rule 0-4-1    (doc) *********************************/

    /* not statically checkable */

/* Rule 0-4-2    (doc) *********************************/

    /* not statically checkable */

/* Rule 0-4-3    (doc) *********************************/

    /* not statically checkable */

/* Rule 1-0-1    (req) *********************************/

    -std(c++2003) /* ensure ISO C++ 2003 compliance */

/* Rule 1-0-2    (req) *********************************/

    /* not statically checkable */

/* Rule 1-0-3    (doc) *********************************/

    /* not statically checkable */

/* Rule 2-2-1    (doc) *********************************/

    /* not statically checkable */

/* Rule 2-3-1    (req) *********************************/

    -ftg            /* disable trigraph expansion */

    /* 584 - trigraph sequence detected */
    +e584
    // +elib(584)
    -append(584,[MISRA C++ Rule 2-3-1])
    
    /* 739 - trigraph sequence in string literal */
    +e739
    // +elib(739)
    -append(739,[MISRA C++ Rule 2-3-1])

/* Rule 2-5-1    (adv) *********************************/

    /* 9102 - possible digraph sequence */
    +e9102
    // +elib(9102)
    -append(9102,[MISRA C++ Rule 2-5-1])

/* Rule 2-7-1    (req) *********************************/

    -fnc            /* disable nested comments */

    /* 602 - slash star within block comment */
    +e602
    // +elib(602)
    -append(602,[MISRA C++ Rule 2-7-1])

/* Rule 2-7-2    (req) *********************************/

    /* not statically checkable */

/* Rule 2-7-3    (adv) *********************************/

    /* not statically checkable */

/* Rule 2-10-1   (req) *********************************/

    +fta            /* enable typographical ambiguity checking */

    /* 9046 - symbol is typographically ambiguous with respect to string */
    +e9046
    // +elib(9046)
    -append(9046,[MISRA C++ Rule 2-10-1])

/* Rule 2-10-2   (req) *********************************/

    /* 578 - declaration hides symbol */
    +e578
    // +elib(578)
    -append(578,[MISRA C++ Rule 2-10-2])
    
    /* 1411 - member with different signature hides virtual member */
    +e1411
    // +elib(1411)
    -append(1411,[MISRA C++ Rule 2-10-2])
    
    /* 1511 - member hides non-virtual member */
    +e1511
    // +elib(1511)
    -append(1511,[MISRA C++ Rule 2-10-2])
    
    /* 1516 - data member hides inherited member */
    +e1516
    // +elib(1516)
    -append(1516,[MISRA C++ Rule 2-10-2])

/* Rule 2-10-3   (req) *********************************/

    /* not currently supported */

/* Rule 2-10-4   (req) *********************************/

    /* not currently supported */

/* Rule 2-10-5   (adv) *********************************/

    /* 9103 - identifier with static storage is reused */
    +e9103
    // +elib(9103)
    -append(9103,[MISRA C++ Rule 2-10-5])

/* Rule 2-10-6   (req) *********************************/

    /* 18 - redefinition of symbol as different kind of symbol */
    +e18
    // +elib(18)
    -append(18,[MISRA C++ Rule 2-10-6])

/* Rule 2-13-1   (req) *********************************/

    /* 606 - non-ANSI escape sequence */
    +e606
    // +elib(606)
    -append(606,[MISRA C++ Rule 2-13-1])

/* Rule 2-13-2   (req) *********************************/

    /* 9104 - octal escape sequence used */
    +e9104
    // +elib(9104)
    -append(9104,[MISRA C++ Rule 2-13-2])

/* Rule 2-13-3   (req) *********************************/

    /* 9105 - unsigned octal and hexadecimal literals require a 'U' suffix */
    +e9105
    // +elib(9105)
    -append(9105,[MISRA C++ Rule 2-13-3])

/* Rule 2-13-4   (req) *********************************/

    /* 9106 - lower case literal suffix */
    +e9106
    // +elib(9106)
    -append(9106,[MISRA C++ Rule 2-13-4])

/* Rule 2-13-5   (req) *********************************/

    /* 707 - mixing narrow and wide string literals in concatenation */
    +e707
    // +elib(707)
    -append(707,[MISRA C++ Rule 2-13-5])

/* Rule 3-1-1    (req) *********************************/

    /* 9107 - header cannot be included in more than one translation unit because
              of the definition of symbol */
    +e9107
    // +elib(9107)
    -append(9107,[MISRA C++ Rule 3-1-1])

/* Rule 3-1-2    (req) *********************************/

    /* 9108 - function declared at block scope */
    +e9108
    // +elib(9108)
    -append(9108,[MISRA C++ Rule 3-1-2])

/* Rule 3-1-3    (req) *********************************/

    /* 9067 - extern array declared without size or initializer */
    +e9067
    // +elib(9067)
    -append(9067,[MISRA C++ Rule 3-1-3])

/* Rule 3-2-1    (req) *********************************/

    /* 18 - redefinition of symbol as different kind of symbol */
    +e18
    // +elib(18)
    -append(18,[MISRA C++ Rule 3-2-1])
    
    /* 31 - redefinition of symbol */
    +e31
    // +elib(31)
    -append(31,[MISRA C++ Rule 3-2-1])

/* Rule 3-2-2    (req) *********************************/

    /* 15 - symbol redeclared with different type */
    +e15
    // +elib(15)
    -append(15,[MISRA C++ Rule 3-2-2])
    
    /* 31 - redefinition of symbol */
    +e31
    // +elib(31)
    -append(31,[MISRA C++ Rule 3-2-2])

/* Rule 3-2-3    (req) *********************************/

    /* 9004 - object/function previously declared */
    +e9004
    // +elib(9004)
    -append(9004,[MISRA C++ Rule 3-2-3])

/* Rule 3-2-4    (req) *********************************/

    /* 15 - symbol redeclared with different type */
    +e15
    // +elib(15)
    -append(15,[MISRA C++ Rule 3-2-4])
    
    /* 31 - redefinition of symbol */
    +e31
    // +elib(31)
    -append(31,[MISRA C++ Rule 3-2-4])

/* Rule 3-3-1    (req) *********************************/

    /* 759 - header declaration for symbol could be moved from header to module */
    +e759
    // +elib(759)
    -append(759,[MISRA C++ Rule 3-3-1])
    
    /* 765 - external symbol could be made static */
    +e765
    // +elib(765)
    -append(765,[MISRA C++ Rule 3-3-1])

/* Rule 3-3-2    (req) *********************************/

    /* 401 - not previously declared static */
    +e401
    // +elib(401)
    -append(401,[MISRA C++ Rule 3-3-2])

    /* 839 - storage class of symbol assumed static */
    +e839
    // +elib(839)
    -append(839,[MISRA C++ Rule 3-3-2])

/* Rule 3-4-1    (req) *********************************/

    /* 9003 - could define global variable 'Symbol' within function */
    +e9003
    // +elib(9003)
    -append(9003,[MISRA C++ Rule 3-4-1])

/* Rule 3-9-1    (req) *********************************/

    /* 9073 - parameter 'Integer' of function 'Symbol' has type alias name
       difference with previous declaration ('Type' vs 'Type') */
    +e9073
    // +elib(9073)
    -append(9073,[MISRA C++ Rule 3-9-1])

    /* 9094 - return type of function 'Symbol' has type alias name difference
       with previous declaration ('Type' vs 'Type') */
    +e9094
    // +elib(9094)
    -append(9094,[MISRA C++ Rule 3-9-1])

    /* 9168 - variable has type alias name difference with previous
       declaration */
    +e9168
    // +elib(9168)
    -append(9168,[MISRA C++ Rule 3-9-1])

/* Rule 3-9-2    (adv) *********************************/

    /* 970 - use of modifier or type outside of a typedef */
    +e970
    // +elib(970)
    -esym(970,wchar_t)
    -append(970,[MISRA C++ Rule 3-9-2])
    //  For the duration, we are presuming MISRA does not want
    //  diagnostics for the bool type.
    -esym(970,bool)

/* Rule 3-9-3    (req) *********************************/

    /* 9110 - bit representation of a floating point type used */
    +e9110
    // +elib(9110)
    -append(9110,[MISRA C++ Rule 3-9-3])

/* Rule 4-5-1    (req) *********************************/

    /* 9111 - boolean expression used with non-permitted operator */
    +e9111
    // +elib(9111)
    -append(9111,[MISRA C++ Rule 4-5-1])

/* Rule 4-5-2    (req) *********************************/

    /* not currently supported */

/* Rule 4-5-3    (req) *********************************/

    /* 9112 - plain character expression used with non-permitted operator */
    +e9112
    // +elib(9112)
    -append(9112,[MISRA C++ Rule 4-5-3])

/* Rule 4-10-1  (req) *********************************/

    /* not currently supported */

/* Rule 4-10-2  (req) *********************************/

    /* 910 - implicit conversion of null pointer constant to pointer */
    +e910
    // +elib(910)
    -emacro((910), NULL)    /*  explicit exception  */
    -append(910,[MISRA C++ Rule 4-10-2])

/* Rule 5-0-1    (req) *********************************/

    /* 564 - variable depends on order of evaluation */
    +e564
    // +elib(564)
    -append(564,[MISRA C++ Rule 5-0-1])

/* Rule 5-0-2    (adv) *********************************/

    /* 9113 - dependence placed on C++ operator precedence */
    +e9113
    // +elib(9113)
    -append(9113,[MISRA C++ Rule 5-0-2])

/* Rule 5-0-3    (req) *********************************/

    /* 9114 - implicit conversion of integer cvalue expression */
    +e9114
    // +elib(9114)
    -append(9114,[MISRA C++ Rule 5-0-3])
    
    /* 9116 - implicit conversion of floating point cvalue expression */
    +e9116
    // +elib(9116)
    -append(9116,[MISRA C++ Rule 5-0-3])

/* Rule 5-0-4    (req) *********************************/

    /* 9117 - implicit conversion changes signedness */
    +e9117
    // +elib(9117)
    -append(9117,[MISRA C++ Rule 5-0-4])

/* Rule 5-0-5    (req) *********************************/

    /* 9115 - implicit conversion from integer to floating point type */
    +e9115
    // +elib(9115)
    -append(9115,[MISRA C++ Rule 5-0-5])
    
    /* 9118 - implicit conversion from floating point to integer type */
    +e9118
    // +elib(9118)
    -append(9118,[MISRA C++ Rule 5-0-5])

/* Rule 5-0-6    (req) *********************************/

    /* 9119 - implicit conversion of integer to smaller type */
    +e9119
    // +elib(9119)
    -append(9119,[MISRA C++ Rule 5-0-6])
    
    /* 9120 - implicit conversion of floating point to smaller type */
    +e9120
    // +elib(9120)
    -append(9120,[MISRA C++ Rule 5-0-6])

/* Rule 5-0-7    (req) *********************************/

    /* 9121 - cast of cvalue expression from integer to floating point type */
    +e9121
    // +elib(9121)
    -append(9121,[MISRA C++ Rule 5-0-7])

    /* 9122 - cast of cvalue expression from floating point to integer type */
    +e9122
    // +elib(9122)
    -append(9122,[MISRA C++ Rule 5-0-7])

/* Rule 5-0-8    (req) *********************************/

    /* 9123 - cast of integer cvalue expression to larger type */
    +e9123
    // +elib(9123)
    -append(9123,[MISRA C++ Rule 5-0-8])
    
    /* 9124 - cast of floating point cvalue expression to larger type */
    +e9124
    // +elib(9124)
    -append(9124,[MISRA C++ Rule 5-0-8])

/* Rule 5-0-9    (req) *********************************/

    /* 9125 - cast of integer cvalue expression changes signedness */
    +e9125
    // +elib(9125)
    -append(9125,[MISRA C++ Rule 5-0-9])

/* Rule 5-0-10    (req) *********************************/

    /* 9126 - result of operator applied to underlying type must be cast */
    +e9126
    // +elib(9126)
    -append(9126,[MISRA C++ Rule 5-0-10])

/* Rule 5-0-11    (req) *********************************/

    /* 9128 - plain char type mixed with type other than plain char */
    +e9128
    // +elib(9128)
    -append(9128,[MISRA C++ Rule 5-0-11])

/* Rule 5-0-12    (req) *********************************/

    /* Not currently supported */

/* Rule 5-0-13    (req) *********************************/

    /* 909 - implicit boolean conversion from type 'Type' */
    +e909
    // +elib(909)
    -append(909,[MISRA C++ Rule 5-0-13])

/* Rule 5-0-14    (req) *********************************/

    /* 909 - implicit boolean conversion from type 'Type' */
    +e909
    // +elib(909)
    -append(909,[MISRA C++ Rule 5-0-14])

/* Rule 5-0-15    (req) *********************************/

    /* 947 - pointer subtraction */
    +e947
    // +elib(947)
    -append(947,[MISRA C++ Rule 5-0-15])
    
    /* 9016 - performing pointer arithmetic via addition/subtraction */
    +e9016
    // +elib(9016)
    -append(9016,[MISRA C++ Rule 5-0-15])

/* Rule 5-0-16    (req) *********************************/

    /* 415 - likely out of bounds pointer access */
    +e415
    // +elib(415)
    -append(415,[MISRA C++ Rule 5-0-16])
    
    /* 416 - likely creating out-of-bounds pointer */
    +e416
    // +elib(416)
    -append(416,[MISRA C++ Rule 5-0-16])
    
    /* 661 - potential out of bounds pointer access */
    +e661
    // +elib(661)
    -append(661,[MISRA C++ Rule 5-0-16])
    
    /* 662 - possibly creating out-of-bounds pointer */
    +e662
    // +elib(662)
    -append(662,[MISRA C++ Rule 5-0-16])
    
/* Rule 5-0-17    (req) *********************************/

    /* 947 - pointer subtraction */
    +e947
    // +elib(947)
    -append(947,[MISRA C++ Rule 5-0-17])

/* Rule 5-0-18    (req) *********************************/

    /* 946 - relational operator applied to pointers */
    +e946
    // +elib(946)
    -append(946,[MISRA C++ Rule 5-0-18])
    
/* Rule 5-0-19    (req) *********************************/

    /* 9025 - more than two levels of pointer indirection */
    +e9025
    // +elib(9025)
    -append(9025,[MISRA C++ Rule 5-0-19])

/* Rule 5-0-20  (req) *********************************/

    /* 9172 - bitwise operator 'Operator' used with non-const operands of
              differing underlying types */
    +e9172
    // +elib(9172)
    -append(9172,[MISRA C++ Rule 5-0-20])

/* Rule 5-0-21  (req) *********************************/

    /* 9130 - bitwise operator applied to signed underlying type */
    +e9130
    // +elib(9130)
    -append(9130,[MISRA C++ Rule 5-0-21])

/* Rule 5-2-1  (req) *********************************/

    /* 9131 - left/right side of logical operator is not a postfix expression */
    +e9131
    // +elib(9131)
    -append(9131,[MISRA C++ Rule 5-2-1])

/* Rule 5-2-2  (req) *********************************/

    /* 1774 - only dynamic_cast can indicate a failure by returning null */
    +e1774
    // +elib(1774)
    -append(1774,[MISRA C++ Rule 5-2-2])
    
    /* 1939 - casting from base class to derived class */
    +e1939
    // +elib(1939)
    -append(1939,[MISRA C++ Rule 5-2-2])

/* Rule 5-2-3  (adv) *********************************/

    /* 9171 - downcast of polymorphic type 'Type' to type 'Type' */
    +e9171
    // +elib(9171)
    -append(9171,[MISRA C++ Rule 5-2-3])

/* Rule 5-2-4  (req) *********************************/

    /* 1924 - use of c-style cast */
    +e1924
    // +elib(1924)
    -append(1924,[MISRA C++ Rule 5-2-4])

/* Rule 5-2-5  (req) *********************************/

    /* 9005 - cast drops qualifier */
    +e9005
    // +elib(9005)
    -append(9005,[MISRA C++ Rule 5-2-5])

/* Rule 5-2-6  (req) *********************************/

    /* 611 - cast between pointer to function type and pointer to object type */
    +e611
    // +elib(611)
    -append(611,[MISRA C++ Rule 5-2-6])
    
/* Rule 5-2-7  (req) *********************************/

    +e9176
    // +elib(9176)
    -append(9176,[MISRA C++ Rule 5-2-7])
    
/* Rule 5-2-8  (adv) *********************************/

    /* 923 - explicit cast from 'Type' to 'Type' (pointer to non-pointer) */
    +e923
    // +elib(923)
    -append(923,[MISRA C++ Rule 5-2-8])
    
    /* 925 - explicit cast from 'Type' to 'Type' (pointer to void pointer) */
    +e925
    // +elib(925)
    -append(925,[MISRA C++ Rule 5-2-8])
    
/* Rule 5-2-9  (adv) *********************************/

    /* 9091 - cast from pointer to integer type */
    +e9091
    // +elib(9091)
    -append(9091,[MISRA C++ Rule 5-2-9])

/* Rule 5-2-10  (adv) *********************************/

    /* 9049 - increment/decrement operation combined with other operation with
              side-effects */
    +e9049
    // +elib(9049)
    -append(9049,[MISRA C++ Rule 5-2-10])

/* Rule 5-2-11  (req) *********************************/

    /* overloading operator 'Operator' precludes short-circuit evaluation */
    +e1753
    // +elib(1753)
    -append(1753,[MISRA C++ Rule 5-2-11])

/* Rule 5-2-12  (req) *********************************/

    /* 9132 - array type passed to function expecting a pointer */
    +e9132
    // +elib(9132)
    -append(9132,[MISRA C++ Rule 5-2-12])

/* Rule 5-3-1  (req) *********************************/

    /* 9133 - boolean expression required for operator 'Operator' */
    +e9133
    // +elib(9133)
    -append(9133,[MISRA C++ Rule 5-3-1])

/* Rule 5-3-2  (req) *********************************/

    /* 9134 - unary minus applied to operand with unsigned underlying type */
    +e9134
    // +elib(9134)
    -append(9134,[MISRA C++ Rule 5-3-2])

/* Rule 5-3-3  (req) *********************************/

    /* 9135 - unary operator & overloaded */
    +e9135
    // +elib(9135)
    -append(9135,[MISRA C++ Rule 5-3-3])

/* Rule 5-3-4    (req) *********************************/

    /* 9006 - 'sizeof' used on expression with side effect */
    +e9006
    // +elib(9006)
    -append(9006,[MISRA C++ Rule 5-3-4])

/* Rule 5-8-1  (req) *********************************/

    /* 9136 - the shift value is at least the precision of the MISRA C++
              underlying type of the left hand side */
    +e9136
    // +elib(9136)
    -append(9136,[MISRA C++ Rule 5-8-1])
    
/* Rule 5-14-1   (req) *********************************/

    /* side effects on right hand of logical operator */
    +e9007
    // +elib(9007)
    -append(9007,[MISRA C++ Rule 5-14-1])

/* Rule 5-17-1  (req) *********************************/

    /* not currently supported */

/* Rule 5-18-1  (req) *********************************/

    /* 9008 - comma operator used */
    +e9008
    // +elib(9008)
    -append(9008,[MISRA C++ Rule 5-18-1])

/* Rule 5-19-1  (adv) *********************************/

    /* 648 - overflow in computing constant for operation */
    +e648
    // +elib(648)
    -append(648,[MISRA C++ Rule 5-19-1])

/* Rule 6-2-1  (req) *********************************/

    /* 720 - boolean test of assignment */
    +e720
    // +elib(720)
    -append(720,[MISRA C++ Rule 6-2-1])
    
    /* 820 - boolean test of parenthesized assignment */
    +e820
    // +elib(820)
    -append(820,[MISRA C++ Rule 6-2-1])

    /* 9084 - result of assignment operator used */
    +e9084
    // +elib(9084)
    -append(9084,[MISRA C++ Rule 6-2-1])

/* Rule 6-2-2  (req) *********************************/

    /* 9137 - testing floating point values for equality (exact) */
    +e9137
    // +elib(9137)
    -append(9137,[MISRA C++ Rule 6-2-2])

/* Rule 6-2-3  (req) *********************************/

    /* 9138 - null statement not on line by itself */
    +e9138
    // +elib(9138)
    -append(9138,[MISRA C++ Rule 6-2-3])

/* Rule 6-3-1  (req) *********************************/

    /* 9012 - body should be a compound statement */
    +e9012
    // +elib(9012)
    -append(9012,[MISRA C++ Rule 6-3-1])

/* Rule 6-4-1  (req) *********************************/

    /* 9012 - body should be a compound statement */
    +e9012
    // +elib(9012)
    -append(9012,[MISRA C++ Rule 6-4-1])

/* Rule 6-4-2  (req) *********************************/

    /* 9013 - no 'else' at end of 'if ... else if' chain */
    +e9013
    // +elib(9013)
    -append(9013,[MISRA C++ Rule 6-4-2])

/* Rule 6-4-3  (req) *********************************/

    /* 9042 - departure from MISRA switch syntax */
    +e9042
    // +elib(9042)
    -append(9042,[MISRA C++ Rule 6-4-3])

/* Rule 6-4-4  (req) *********************************/

    /* 9055 - most closely enclosing compound statement of this case/default
              label is not a switch statement */
    +e9055
    // +elib(9055)
    -append(9055,[MISRA C++ Rule 6-4-4])

/* Rule 6-4-5  (req) *********************************/

    /* 9090 - switch case lacks unconditional break or throw */  
    +e9090
    // +elib(9090)
    -append(9090,[MISRA C++ Rule 6-4-5])

/* Rule 6-4-6  (req) *********************************/

    /* 744 - switch statement has no default */
    +e744
    // +elib(744)
    -append(744,[MISRA C++ Rule 6-4-6])
    
    /* 9139 - case label follows default in switch statement */
    +e9139
    // +elib(9139)
    -append(9139,[MISRA C++ Rule 6-4-6])

/* Rule 6-4-7  (req) *********************************/

    /* 483 - switching on a boolean value */
    +e483
    // +elib(483)
    -append(483,[MISRA C++ Rule 6-4-7])

/* Rule 6-4-8  (req) *********************************/

    /* 764 - switch with no cases */
    +e764
    // +elib(764)
    -append(764,[MISRA C++ Rule 6-4-8])

/* Rule 6-5-1  (req) *********************************/

    /* not currently supported */

/* Rule 6-5-2  (req) *********************************/

    /* not currently supported */

/* Rule 6-5-3  (req) *********************************/

    /* 850 - for statement index variable modified in body */
    +e850
    // +elib(850)
    -append(850,[MISRA C++ Rule 6-5-3])

/* Rule 6-5-4  (req) *********************************/

    /* not currently supported */

/* Rule 6-5-5  (req) *********************************/

    /* not currently supported */

/* Rule 6-5-6  (req) *********************************/

    /* not currently supported */

/* Rule 6-6-1  (req) *********************************/

    /* 9041 - goto appears in block 'String' which is not nested in
       block 'String' which contains label 'Symbol' */
    +e9041
    // +elib(9041)
    -append(9041,[MISRA C++ Rule 6-6-1])

/* Rule 6-6-2  (req) *********************************/

    /* 107 - label not defined */
    +e107
    // +elib(107)
    -append(107,[MISRA C++ Rule 6-6-2])
    
    /* 9064 - goto references earlier label */
    +e9064
    // +elib(9064)
    -append(9064,[MISRA C++ Rule 6-6-2])

/* Rule 6-6-3  (req) *********************************/

    /* 9254 - continue statement encountered */
    +e9254
    // +elib(9254)
    -append(9254,[MISRA C++ Rule 6-6-3])

/* Rule 6-6-4  (req) *********************************/

    /* 9011 - multiple loop exits */
    +e9011
    // +elib(9011)
    -append(9011,[MISRA C++ Rule 6-6-4])

/* Rule 6-6-5  (req) *********************************/

    /* 904 - return statement before end of function */
    +e904
    // +elib(904)
    -append(904,[MISRA C++ Rule 6-6-5])

/* Rule 7-1-1  (req) *********************************/

    /* 952 - parameter of function could be const */
    +e952
    // +elib(952)
    -append(952,[MISRA C++ Rule 7-1-1])

/* Rule 7-1-2  (req) *********************************/

    /* 818 - parameter of function could be pointer to const */
    +e818
    // +elib(818)
    -append(818,[MISRA C++ Rule 7-1-2])

/* Rule 7-2-1  (req) *********************************/

    /* not currently supported */

/* Rule 7-3-1  (req) *********************************/

    /* 9141 - global declaration of symbol */
    +e9141
    // +elib(9141)
    -append(9141,[MISRA C++ Rule 7-3-1])

    /* 9162 - use of static_assert/using declaration at global scope */
    +e9162
    // +elib(9162)
    -append(9162,[MISRA C++ Rule 7-3-1])

/* Rule 7-3-2  (req) *********************************/

    /* 9142 - function main declared outside the global namespace */
    +e9142
    // +elib(9142)
    -append(9142,[MISRA C++ Rule 7-3-2])

/* Rule 7-3-3  (req) *********************************/

    /* 1751 - anonymous namespace declared in a header file */
    +e1751
    // +elib(1751)
    -append(1751,[MISRA C++ Rule 7-3-3])

/* Rule 7-3-4  (req) *********************************/

    /* 9144 - using directive used */
    +e9144
    // +elib(9144)
    -append(9144,[MISRA C++ Rule 7-3-4])

/* Rule 7-3-5  (req) *********************************/

    /* not currently supported */

/* Rule 7-3-6  (req) *********************************/

    /* 9145 - using declaration/directive in header */
    +e9145
    // +elib(9145)
    -append(9145,[MISRA C++ Rule 7-3-6])

/* Rule 7-4-1  (doc) *********************************/

    /* not statically checkable */

/* Rule 7-4-2  (req) *********************************/

    /*  only use the asm declaration to introduce assembly code  */
    -rw(_asm)
    -rw(__asm)
    -pragma(asm)
    -pragma(endasm)
    -ppw(asm)
    -ppw(endasm)

/* Rule 7-4-3  (req) *********************************/

    /* not currently supported */

/* Rule 7-5-1  (req) *********************************/

    /* 604 - returning address of auto variable */
    +e604
    // +elib(604)
    -append(604,[MISRA C++ Rule 7-5-1])

/* Rule 7-5-2  (req) *********************************/

    /* 789 - assigning address of auto variable to static */
    +e789
    // +elib(789)
    -append(789,[MISRA C++ Rule 7-5-2])
    
/* Rule 7-5-3  (req) *********************************/

    /* 1780 - returning address of reference to a const parameter */
    +e1780
    // +elib(1780)
    -append(1780,[MISRA C++ Rule 7-5-3])
    
    /* 1940 - address of non-const reference parameter transferred outside of
              function */
    +e1940
    // +elib(1940)
    -append(1940,[MISRA C++ Rule 7-5-3])

/* Rule 7-5-4  (req) *********************************/

    /* 9070 - function is recursive */
    +e9070
    // +elib(9070)
    -append(9070,[MISRA C++ Rule 7-5-4])

/* Rule 8-0-1  (req) *********************************/

    /* 9146 - multiple declarators in a declaration */
    +e9146
    // +elib(9146)
    -append(9146,[MISRA C++ Rule 8-0-1])

/* Rule 8-3-1  (req) *********************************/

    /* 1735 - parameter of virtual function has default argument */
    +e1735
    // +elib(1735)
    -append(1735,[MISRA C++ Rule 8-3-1])

/* Rule 8-4-1  (req) *********************************/

    /* 9165 - function defined with a variable number of arguments */
    +e9165
    // +elib(9165)
    -append(9165,[MISRA C++ Rule 8-4-1])

/* Rule 8-4-2  (req) *********************************/

    /* 9072 - parameter of function has different name than previous
              declaration */
    +e9072
    // +elib(9072)
    -append(9072,[MISRA C++ Rule 8-4-2])

    /* 9272 - parameter of function has different name than overridden
              function */
    +e9272
    // +elib(9272)
    -append(9272,[MISRA C++ Rule 8-4-2])

/* Rule 8-4-3  (req) *********************************/

    /* 533 - function should return a value */
    +e533
    // +elib(533)
    -append(533,[MISRA C++ Rule 8-4-3])

/* Rule 8-4-4  (req) *********************************/

    /* 9147 - implicit function-to-pointer decay */
    +e9147
    // +elib(9147)
    -append(9147,[MISRA C++ Rule 8-4-4])

/* Rule 8-5-1  (req) *********************************/

    /* 530 - likely using an uninitialized value */
    +e530
    // +elib(530)
    -append(530,[MISRA C++ Rule 8-5-1])
    
/* Rule 8-5-2  (req) *********************************/

    /* 940 - omitted braces within initializer */
    +e940
    // +elib(940)
    -append(940,[MISRA C++ Rule 8-5-2])

/* Rule 8-5-3  (req) *********************************/

    /* 9148 - '=' should initialize either all enum members or only the first */
    +e9148
    // +elib(9148)
    -append(9148,[MISRA C++ Rule 8-5-3])

/* Rule 9-3-1  (req) *********************************/

    /* 605 - pointee implicitly gains/loses qualifier in conversion */
    +e605
    // +elib(605)
    -append(605,[MISRA C++ Rule 9-3-1])

    /* 1536 - member function symbol exposes lower access member symbol */
    +e1536
    // +elib(1536)
    -append(1536,[MISRA C++ Rule 9-3-1])

/* Rule 9-3-2  (req) *********************************/

    /* 1536 - member function symbol exposes lower access member symbol */
    +e1536
    // +elib(1536)
    -append(1536,[MISRA C++ Rule 9-3-2])

/* Rule 9-3-3  (req) *********************************/

    /* 1762 - member function could be made const */
    +e1762
    // +elib(1762)
    -append(1762,[MISRA C++ Rule 9-3-3])

/* Rule 9-5-1  (req) *********************************/

    /* 9018 - union declared */
    +e9018
    // +elib(9018)
    -append(9018,[MISRA C++ Rule 9-5-1])

/* Rule 9-6-1  (doc) *********************************/

    /* not statically checkable */

/* Rule 9-6-2  (req) *********************************/

    /* 9149 - bit field must be explicitly signed integer, unsigned integer, or bool */
    +e9149
    // +elib(9149)
    -append(9149,[MISRA C++ Rule 9-6-2])

/* Rule 9-6-3  (req) *********************************/

    /* 9149 - bit field must be explicitly signed integer, unsigned integer, or bool */
    +e9149
    // +elib(9149)
    -append(9149,[MISRA C++ Rule 9-6-3])

/* Rule 9-6-4  (req) *********************************/

    /* 9088 - named signed single-bit bitfield */
    +e9088
    // +elib(9088)
    -append(9088,[MISRA C++ Rule 9-6-4])

/* Rule 10-1-1  (adv) *********************************/

    /* 9174 - 'Type' is a virtual base class of 'Symbol' */
    +e9174
    // +elib(9174)
    -append(9174,[MISRA C++ Rule 10-1-1])

/* Rule 10-1-2  (req) *********************************/

    /* not currently supported */

/* Rule 10-1-3  (req) *********************************/

    /* 1748 - non-virtual base class symbol included twice in class symbol */
    +e1748
    // +elib(1748)
    -append(1748,[MISRA C++ Rule 10-1-3])

/* Rule 10-2-1  (adv) *********************************/

    /* not currently supported */

/* Rule 10-3-1  (req) *********************************/

    /* not currently supported */

/* Rule 10-3-2  (req) *********************************/

    /* 1909 - virtual' assumed */
    +e1909
    // +elib(1909)
    -append(1909,[MISRA C++ Rule 10-3-2])

/* Rule 10-3-3  (req) *********************************/

    /* 9170 - pure function 'Symbol' overrides non-pure function 'Symbol' */
    +e9170
    // +elib(9170)
    -append(9170,[MISRA C++ Rule 10-3-3])

/* Rule 11-0-1  (req) *********************************/

    /* 9150 - non-private data member within a non-POD structure */
    +e9150
    // +elib(9150)
    -append(9150,[MISRA C++ Rule 11-0-1])

/* Rule 12-1-1  (req) *********************************/

    /* 1506 - call to virtual function within a constructor/destructor */
    +e1506
    // +elib(1506)
    -append(1506,[MISRA C++ Rule 12-1-1])

/* Rule 12-1-2  (adv) *********************************/

    /* 1928 - base class absent from initializer list for constructor */
    +e1928
    // +elib(1928)
    -append(1928,[MISRA C++ Rule 12-1-2])

/* Rule 12-1-3  (req) *********************************/

    /* 9169 - constructor 'Symbol' can be used for implicit conversions to
       fundamental type 'Type' */
    +e9169
    // +elib(9169)
    -append(9169,[MISRA C++ Rule 12-1-3])

/* Rule 12-8-1  (req) *********************************/

    /* 1938 - constructor accesses global data */
    +e1938
    // +elib(1938)
    -append(1938,[MISRA C++ Rule 12-8-1])

/* Rule 12-8-2  (req) *********************************/

    /* 9151 - abstract class declares public copy assignment operator */
    +e9151
    // +elib(9151)
    -append(9151,[MISRA C++ Rule 12-8-2])

/* Rule 14-5-1  (req) *********************************/

    /* Not currently supported */

/* Rule 14-5-2  (req) *********************************/

    /* 1789 - constructor template cannot be a copy constructor */
    +e1789
    // +elib(1789)
    -append(1789,[MISRA C++ Rule 14-5-2])

/* Rule 14-5-3  (req) *********************************/

    /* 1721 - operator=() for is not a copy nor move assignment operator */
    +e1721
    // +elib(1721)
    -append(1721,[MISRA C++ Rule 14-5-3])

/* Rule 14-6-1  (req) *********************************/

    /* Not currently supported */

/* Rule 14-6-2  (req) *********************************/

    /* awaiting clarification from MISRA */

/* Rule 14-7-1  (req) *********************************/

    /* 1795 - defined template is not instantiated */
    +e1795
    // +elib(1795)
    -append(1795,[MISRA C++ Rule 14-7-1])

/* Rule 14-7-2  (req) *********************************/

    /* not currently supported */

/* Rule 14-7-3  (req) *********************************/

    /* 1576 - explicit specialization is not in the same file as specialized
              function template */
    +e1576
    // +elib(1576)
    -append(1576,[MISRA C++ Rule 14-7-3])
    
    /* 1577 - partial or explicit specialization is not in the same file as
              specialized class template */
    +e1577
    // +elib(1577)
    -append(1577,[MISRA C++ Rule 14-7-3])

/* Rule 14-8-1  (req) *********************************/

    /* Not currently supported */

/* Rule 14-8-2  (adv) *********************************/

    /* 9153 - viable set contains both function and template */
    +e9153
    // +elib(9153)
    -append(9153,[MISRA C++ Rule 14-8-2])

/* Rule 15-0-1  (doc) *********************************/

    /* not statically checkable */

/* Rule 15-0-2  (adv) *********************************/

    /* 9154 - throwing a pointer */
    +e9154
    // +elib(9154)
    -append(9154,[MISRA C++ Rule 15-0-2])

/* Rule 15-0-3  (req) *********************************/

    /* 646 - case/default within loop */
    +estring(646,try,catch)
    -append(646,[MISRA C++ Rule 15-0-3])

/* Rule 15-1-1  (req) *********************************/

    /* not currently supported */

/* Rule 15-1-2  (req) *********************************/

    /* 1419 - throwing the NULL macro will invoke an implementation-defined handler */
    +e1419
    // +elib(1419)
    -append(1419,[MISRA C++ Rule 15-1-2])

/* Rule 15-1-3  (req) *********************************/

    /* 9156 - rethrow outside of catch block will call std::terminate if no
              exception is being handled */
    +e9156
    // +elib(9156)
    -append(9156,[MISRA C++ Rule 15-1-3])

/* Rule 15-3-1  (req) *********************************/

    /* 1546 - throw outside try in destructor body */
    +e1546
    // +elib(1546)
    -append(1546,[MISRA C++ Rule 15-3-1])

/* Rule 15-3-2  (adv) *********************************/

    /* not currently supported */

/* Rule 15-3-3  (req) *********************************/

    /* not currently supported */

/* Rule 15-3-4  (req) *********************************/

    /* 1560 - warning uncaught exception not on throw-list of function symbol */
    +e1560
    // +elib(1560)
    -append(1560,[MISRA C++ Rule 15-3-4])

/* Rule 15-3-5  (req) *********************************/

    /* 1752 - catch parameter is not a reference */
    +e1752
    // +elib(1752)
    -append(1752,[MISRA C++ Rule 15-3-5])

/* Rule 15-3-6  (req) *********************************/

    /* not currently supported */

/* Rule 15-3-7  (req) *********************************/

    /* 1127 - catch handler after catch(...) */
    +e1127
    // +elib(1127)
    -append(1127,[MISRA C++ Rule 15-3-7])

/* Rule 15-4-1  (req) *********************************/

    /* 1548 - exception specification in declaration does not match previous
              declaration */
    +e1548
    // +elib(1548)
    -append(1548,[MISRA C++ Rule 15-4-1])

/* Rule 15-5-1  (req) *********************************/

    /* 1546 - throw outside try in destructor body */
    +e1546
    // +elib(1546)
    -append(1546,[MISRA C++ Rule 15-5-1])

/* Rule 15-5-2  (req) *********************************/

    /* 1549 - exception of type 'Type' thrown from function is not in throw list */
    +e1549
    // +elib(1549)
    -append(1549,[MISRA C++ Rule 15-5-2])

/* Rule 15-5-3  (req) *********************************/

    /* 1546 - throw outside try in destructor body */
    +e1546
    // +elib(1546)
    -append(1546,[MISRA C++ Rule 15-5-3])

/* Rule 16-0-1  (req) *********************************/

    /* 9019 - declaration of 'Symbol' before #include */
    +e9019
    // +elib(9019)
    -append(9019,[MISRA C++ Rule 16-0-1])

/* Rule 16-0-2  (req) *********************************/

    /* 9158 - #define used within block scope */
    +e9158
    // +elib(9158)
    -append(9158,[MISRA C++ Rule 16-0-2])
    
    /* 9159 - #undef used within block scope */
    +e9159
    // +elib(9159)
    -append(9159,[MISRA C++ Rule 16-0-2])

/* Rule 16-0-3  (req) *********************************/

    /* 9021 - use of '#undef' is discouraged */
    +e9021
    // +elib(9021)
    -append(9021,[MISRA C++ Rule 16-0-3])

/* Rule 16-0-4  (req) *********************************/

    /* 9026 - function-like macro defined */
    +e9026
    // +elib(9026)
    -append(9026,[MISRA C++ Rule 16-0-4])

/* Rule 16-0-5  (req) *********************************/

    /* 436 - preprocessor directive in invocation of macro */
    +e436
    // +elib(436)
    -append(436,[MISRA C++ Rule 16-0-5])

/* Rule 16-0-6  (req) *********************************/

    /* 9022 - unparenthesized macro parameter in definition of macro */
    +e9022
    // +elib(9022)
    -append(9022,[MISRA C++ Rule 16-0-6])

/* Rule 16-0-7  (req) *********************************/

    /* 553 - undefined preprocessor variable assumed to be 0 */
    +e553
    // +elib(553)
    -append(553,[MISRA C++ Rule 16-0-7])

/* Rule 16-0-8  (req) *********************************/

    /* 16 - unknown preprocessor directive */
    +e16
    // +elib(16)
    -append(16,[MISRA C++ Rule 16-0-8])

    /* 544 - preprocessor directive not followed by EOL */
    +e544
    // +elib(544)
    -append(544,[MISRA C++ Rule 16-0-8])

    /* 9160 - unknown preprocessor directive in conditionally excluded region */
    +e9160
    // +elib(9160)
    -append(9160,[MISRA C++ Rule 16-0-8])

/* Rule 16-1-1  (req) *********************************/

    /* 491 - non-standard use of 'defined' preprocessor operator */
    +e491
    // +elib(491)
    -append(491,[MISRA C++ Rule 16-1-1])

/* Rule 16-1-2  (req) *********************************/

    /* 8 - unclosed #if */
    +e8
    // +elib(8)
    -append(8,[MISRA C++ Rule 16-1-2])

/* Rule 16-2-1  (req) *********************************/

    /* not currently supported */

/* Rule 16-2-2  (req) *********************************/

    /* Not currently supported */

/* Rule 16-2-3  (req) *********************************/

    /* 967 - header file does not have a standard include guard */
    +e967
    // +elib(967)
    -append(967,[MISRA C++ Rule 16-2-3])

/* Rule 16-2-4  (req) *********************************/

    /* 9020 - header file name with non-standard character */
    +e9020
    -estring(9020,\)    /* not covered by this rule */
    -append(9020,[MISRA C++ Rule 16-2-4])

/* Rule 16-2-5  (adv) *********************************/

    /* 9020 - header file name with non-standard character */
    /*  Note: If your system requires the '\' be used as a directory
        separator, comment out the following options.  */
    +estring(9020,\)
    -append(9020(\),[MISRA C++ Rule 16-2-5])

/* Rule 16-2-6  (req) *********************************/

    /* 12 - need < or \ */
    +e12
    // +elib(12)
    -append(12,[MISRA C++ Rule 16-2-6])

/* Rule 16-3-1  (req) *********************************/

    /* 9023 - multiple use of stringize/pasting operators in definition of macro */
    +e9023
    // +elib(9023)
    -append(9023,[MISRA C++ Rule 16-3-1])

/* Rule 16-3-2  (adv) *********************************/

    /* 9024 - pasting/stringize operator used in definition of macro */
    +e9024
    // +elib(9024)
    -append(9024,[MISRA C++ Rule 16-3-2])

/* Rule 16-6-1  (doc) *********************************/

    /* not statically checkable */

/* Rule 17-0-1  (req) *********************************/

    /* 9052 - macro defined with the same name as a C++ keyword */
    +e9052
    // +elib(9052)
    -append(9052,[MISRA C++ Rule 17-0-1])

    /* 9071 - defined macro is reserved to the compiler */
    +e9071
    // +elib(9071)
    -append(9071,[MISRA C++ Rule 17-0-2])

/* Rule 17-0-2  (req) *********************************/

    /* 9093 - the name is reserved to the compiler */
    +e9093
    // +elib(9093)
    -append(9093,[MISRA C++ Rule 17-0-2])

/* Rule 17-0-3  (req) *********************************/

    /* not currently supported */

/* Rule 17-0-4  (req) *********************************/

    /* See various // +elib options throughout this file. */

/* Rule 17-0-5  (req) *********************************/

    /* 586 - 'String' 'Name' is deprecated */
    +e586
    // +elib(586)
    -deprecate( function, longjmp, [MISRA C++ Rule 17-0-5] )
    -deprecate( macro, setjmp, [MISRA C++ Rule 17-0-5] )

/* Rule 18-0-1  (req) *********************************/

    /* 829 - a +headerwarn option was previously issued for header */
    +e829
    // +elib(829)
    +headerwarn(time.h)
    +headerwarn(limits.h)
    +headerwarn(float.h)
    +headerwarn(stddef.h)
    +headerwarn(errno.h)
    +headerwarn(locale.h)
    +headerwarn(stdio.h)
    +headerwarn(ctype.h)
    +headerwarn(string.h)
    +headerwarn(math.h)
    +headerwarn(stdlib.h)
    +headerwarn(assert.h)
    +headerwarn(stdarg.h)
    +headerwarn(setjmp.h)
    +headerwarn(signal.h)
    -append(829,[MISRA C++ Rule 18-0-1])

/* Rule 18-0-2  (req) *********************************/

    /* 586 - 'String' 'Name' is deprecated */
    +e586
    // +elib(586)
    -deprecate( function, atof, [MISRA C++ Rule 18-0-2] )
    -deprecate( function, atoi, [MISRA C++ Rule 18-0-2] )
    -deprecate( function, atol, [MISRA C++ Rule 18-0-2] )

/* Rule 18-0-3  (req) *********************************/

    /* 586 - 'String' 'Name' is deprecated */
    +e586
    // +elib(586)
    -deprecate( function, abort, [MISRA C++ Rule 18-0-3] )
    -deprecate( function, exit, [MISRA C++ Rule 18-0-3] )
    -deprecate( function, getenv, [MISRA C++ Rule 18-0-3] )
    -deprecate( function, system, [MISRA C++ Rule 18-0-3] )

/* Rule 18-0-4  (req) *********************************/

    /* 829 - a +headerwarn option was previously issued for header */
    +e829
    // +elib(829)
    +headerwarn(ctime)
    -append(829,[MISRA C++ Rule 18-0-4])

/* Rule 18-0-5  (req) *********************************/

    /* 586 - 'String' 'Name' is deprecated */
    +e586
    // +elib(586)
    -deprecate( function, strcpy, [MISRA C++ Rule 18-0-5] )
    -deprecate( function, strcmp, [MISRA C++ Rule 18-0-5] )
    -deprecate( function, strcat, [MISRA C++ Rule 18-0-5] )
    -deprecate( function, strchr, [MISRA C++ Rule 18-0-5] )
    -deprecate( function, strspn, [MISRA C++ Rule 18-0-5] )
    -deprecate( function, strcspn, [MISRA C++ Rule 18-0-5] )
    -deprecate( function, strpbrk, [MISRA C++ Rule 18-0-5] )
    -deprecate( function, strrchr, [MISRA C++ Rule 18-0-5] )
    -deprecate( function, strstr, [MISRA C++ Rule 18-0-5] )
    -deprecate( function, strtok, [MISRA C++ Rule 18-0-5] )
    -deprecate( function, strlen, [MISRA C++ Rule 18-0-5] )

/* Rule 18-2-1  (req) *********************************/

    /* 586 - 'String' 'Name' is deprecated */
    +e586
    // +elib(586)
    -deprecate( macro, offsetof, [MISRA C++ Rule 18-2-1] )

/* Rule 18-4-1  (req) *********************************/

    /* 9173 - use of non-placement allocation function 'Symbol' */
    +e9173
    // +elib(9173)
    -append(9173,[MISRA C++ Rule 18-4-1])

    /* 586 - 'String' 'Name' is deprecated */
    +e586
    // +elib(586)
    -deprecate( function, calloc, [MISRA C++ Rule 18-4-1] )
    -deprecate( function, malloc, [MISRA C++ Rule 18-4-1] )
    -deprecate( function, realloc, [MISRA C++ Rule 18-4-1] )
    -deprecate( function, free, [MISRA C++ Rule 18-4-1] )

/* Rule 18-7-1  (req) *********************************/

    /* 829 - a +headerwarn option was previously issued for header */
    +e829
    // +elib(829)
    +headerwarn(csignal)
    -append(829,[MISRA C++ Rule 18-7-1])

/* Rule 19-3-1  (req) *********************************/

    /* 586 - 'String' 'Name' is deprecated */
    +e586
    // +elib(586)
    -deprecate( variable, errno, [MISRA C++ Rule 19-3-1] )

/* Rule 27-0-1  (req) *********************************/

    /* 829 - a +headerwarn option was previously issued for header */
    +e829
    // +elib(829)
    +headerwarn(cstdio)
    -append(829,[MISRA C++ Rule 27-0-1])
