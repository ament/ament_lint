/* Compiler configuration for vs2015 19.00.24215.
   Using the options:  
   Generated on 2018-01-03 07:15:09 with pclp_config version 1.0.0.
 */

// Base Options
//     Extensions
-std=c++14  //Enable C++14 support
-$  //Enable $ as an identifier character
+fan  //Enable support for anonymous unions
+fdi  //Search including directory
+fsi  //Search include stack for headers
+frc  //Enable MSVC behavior with regards to handling of commas in macro expansions involving __VA_ARGS__
+fbl  //Search dependent base classes for unqualified lookup in a class template
+fei  //Enumerations are always int
+fur  //Allow unions to contain reference members
+frd  //Allow redefinition of default parameters for member functions of a class template
+fum  //A user-declared move operation will only delete the corresponding copy operation
+ffv  //Implicit conversion from function pointers to void pointers
+flp  //Support the C++98 definition of null pointer constant
+fnf  //Fall back on operator new when operator new[] cannot be found
+fes  //Search enclosing scopes for friend tag declarations
+ffw  //A friend declaration may act as a forward declaration
+fma  //Microsoft Asm blocks
+fdt  //Enable delayed template parsing
+fms  //Other Microsoft extensions
-fon  //Disable alternative C++ tokens for logical operators
+fwc  //internal wchar_t
+fwu  //wchar_t is unsigned
+ppw(using)  //Enable support for the #using directive
+ppw(import)  //Enable support for the #import directive
+rw(___identifier)
+rw(__alignof)
+rw(__asm)
+rw(__builtin_alignof)
+rw(__cdecl)
+rw(__declspec)
+rw(__fastcall)
+rw(__finally)
+rw(__forceinline)
+rw(__gc)
+rw(__if_exists)
+rw(__if_not_exists)
+rw(__inline)
+rw(__int16)
+rw(__int32)
+rw(__int64)
+rw(__int8)
+rw(__interface)
+rw(__is_destructible)
+rw(__is_interface_class)
+rw(__is_nothrow_destructible)
+rw(__is_sealed)
+rw(__leave)
+rw(__multiple_inheritance)
+rw(__nogc)
+rw(__pin)
+rw(__ptr64)
+rw(__ptr32)
+rw(__single_inheritance)
+rw(__sptr)
+rw(__stdcall)
+rw(__super)
+rw(__thiscall)
+rw(__try)
+rw(__try_cast)
+rw(__uptr)
+rw(__unaligned)
+rw(__uuidof)
+rw(__value)
+rw(__vectorcall)
+rw(__virtual_inheritance)
+rw(__w64)
+rw(__wchar_t)
+rw(_asm)
+rw(_alignof)
+rw(_cdecl)
+rw(_declspec)
+rw(_fastcall)
+rw(_inline)
+rw(_int16)
+rw(_int32)
+rw(_int64)
+rw(_int8)
+rw(_stdcall)
+rw(_thiscall)
+rw(_uuidof)
+rw(char16_t)
+rw(char32_t)
++doffsetof(s,m)=__builtin_offsetof(s,m)

//     Suppressions
-emacro(505 792 1773,va_start)
-esym(4242,std::_Const_cast)
-estring(9022,_identifier)
-estring(9051 9052,_inline,_declspec,_stdcall)
-emacro(413, offsetof)



// Transformed compiler options

// Size Options
-si4 -sl4 -sll8 -ss2 -sw2 -sp8 -sf4 -sd8 -sld8

// Include Options
--i"C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\INCLUDE"
--i"C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\ATLMFC\INCLUDE"
--i"C:\Program Files (x86)\Windows Kits\10\include\10.0.16299.0\ucrt"
--i"C:\Program Files (x86)\Windows Kits\NETFXSDK\4.6.1\include\um"
--i"C:\Program Files (x86)\Windows Kits\10\include\10.0.16299.0\shared"
--i"C:\Program Files (x86)\Windows Kits\10\include\10.0.16299.0\um"
--i"C:\Program Files (x86)\Windows Kits\10\include\10.0.16299.0\winrt"

+libh(co-cl.h)
-header(co-cl.h)

////////////////////////////////////////////////////////////////////////////////
../c99.lnt
../env-xml.lnt
-dPCLINT_PLUS=1
-emacro(*, FIONBIO)
-emacro(*, INVALID_HANDLE_VALUE)